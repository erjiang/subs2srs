<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="checkBoxSubs1JoinSentences.ToolTip" xml:space="preserve">
    <value>For example, given these 3 lines:

  LineA,
  LineB,
  LineC.

when this option is enabled and the box to the right contains a comma,
then these lines will be combined as follows:

  LineA, LineB, LineC.</value>
  </data>
  <data name="checkBoxSubs1RemovedNoCounterpart.ToolTip" xml:space="preserve">
    <value>Remove any lines from Subs1 that do not have an obvious counterpart in Subs2. Useful for
removing unwanted credits, descriptions of audio (such as “wind blowing” or “door creaking”),
and things that aren't quite words (such as grunts or coughs).
</value>
  </data>
  <data name="checkBoxSubs1RemoveStyledLines.ToolTip" xml:space="preserve">
    <value>Remove styled Subs1 lines when parsing the subtitles.
A styled line is one that begins with a '{' character.
It is usually an unwanted effect such as karaoke.
Take care when unchecking this.

Note: Only affects .ass subtitles.</value>
  </data>
  <data name="checkBoxSubs2JoinSentences.ToolTip" xml:space="preserve">
    <value>For example, given these 3 lines:

  LineA,
  LineB,
  LineC.

when this option is enabled and the box to the right contains a comma,
then these lines will be combined as follows:

  LineA, LineB, LineC.</value>
  </data>
  <data name="checkBoxSubs2RemoveNoCounterpart.ToolTip" xml:space="preserve">
    <value>Remove any lines from Subs2 that do not have an obvious counterpart in Subs1. Useful for
removing unwanted credits, descriptions of audio (such as “wind blowing” or “door creaking”),
and things that aren't quite words (such as grunts or coughs).
</value>
  </data>
  <data name="checkBoxSubs2RemoveStyledLines.ToolTip" xml:space="preserve">
    <value>Remove styled Subs2 lines when parsing the subtitles.
A styled line is one that begins with a '{' character.
It is usually an unwanted effect such as karaoke.
Take care when unchecking this.

Note: Only affects .ass subtitles.</value>
  </data>
  <data name="textBoxContextHelp.Text" xml:space="preserve">
    <value>This option allows you to observe the context in which a line of dialog appears by
attaching lines leading up to and trailing each line of dialog. Audio clips, snapshots 
and video clips can also be attached.</value>
  </data>
  <data name="labelTrailingRange.ToolTip" xml:space="preserve">
    <value>Maximum number of seconds between the current line and the trailing line(s) 
for the trailing line(s) to be considered part of the context.

For example, the line said right before the opening credits is likely not in the 
same context as the line said right after the opening credits. Assuming the 
credits are not subtitled and the length of the credits is greater than the 
provided range, then the line said right after the credits will not be included in 
the context of the line said before after the credits.

To disable this feature, set to 0.</value>
  </data>
  <data name="labelLeadingRange.ToolTip" xml:space="preserve">
    <value>Maximum number of seconds between the current line and the leading line(s) 
for the leading line(s) to be considered part of the context.

For example, the line said right before the opening credits is likely not in the 
same context as the line said right after the opening credits. Assuming the 
credits are not subtitled and the length of the credits is greater than the 
provided range, then the line said right before the credits will not be included in 
the context of the line said right after the credits.

To disable this feature, set to 0.</value>
  </data>
  <metadata name="colorDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>109, 17</value>
  </metadata>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>222, 17</value>
  </metadata>
</root>